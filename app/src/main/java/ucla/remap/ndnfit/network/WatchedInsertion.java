/**
 * Copyright (C) 2015-2016 Regents of the University of California.
 * @author: Jeff Thompson <jefft0@remap.ucla.edu>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * A copy of the GNU Lesser General Public License is in the file COPYING.
 */

package ucla.remap.ndnfit.network;

import com.google.protobuf.ByteString;
import java.io.IOException;
import java.nio.ByteBuffer;
import net.named_data.jndn.Data;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.InterestFilter;
import net.named_data.jndn.Name;
import net.named_data.jndn.OnData;
import net.named_data.jndn.OnInterestCallback;
import net.named_data.jndn.OnRegisterFailed;
import net.named_data.jndn.OnTimeout;
import net.named_data.jndn.encoding.EncodingException;
import net.named_data.jndn.encoding.ProtobufTlv;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.KeyType;
import net.named_data.jndn.security.SecurityException;
import net.named_data.jndn.security.identity.IdentityManager;
import net.named_data.jndn.security.identity.MemoryIdentityStorage;
import net.named_data.jndn.security.identity.MemoryPrivateKeyStorage;
import net.named_data.jndn.security.policy.SelfVerifyPolicyManager;
import net.named_data.jndn.util.Blob;
import ucla.remap.ndnfit.network.RepoCommandParameterProto
         .RepoCommandParameterMessage;
import ucla.remap.ndnfit.network.RepoCommandResponseProto
         .RepoCommandResponseMessage;
import ucla.remap.ndnfit.network.RepoCommandResponseProto
         .RepoCommandResponseMessage.RepoCommandResponse;

/**
 * This shows an example of the repo-ng watched prefix insertion protocol,
 * described here:
 * http://redmine.named-data.net/projects/repo-ng/wiki/Watched_Prefix_Insertion_Protocol
 * See main() for more details.
 */
public class WatchedInsertion {
  // Convert the int array to a ByteBuffer.
  private static ByteBuffer
  toBuffer(int[] array)
  {
    ByteBuffer result = ByteBuffer.allocate(array.length);
    for (int i = 0; i < array.length; ++i)
      result.put((byte)(array[i] & 0xff));

    result.flip();
    return result;
  }

  private static final ByteBuffer DEFAULT_RSA_PUBLIC_KEY_DER = toBuffer(new int[] {
    0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
    0x00, 0xb8, 0x09, 0xa7, 0x59, 0x82, 0x84, 0xec, 0x4f, 0x06, 0xfa, 0x1c, 0xb2, 0xe1, 0x38, 0x93,
    0x53, 0xbb, 0x7d, 0xd4, 0xac, 0x88, 0x1a, 0xf8, 0x25, 0x11, 0xe4, 0xfa, 0x1d, 0x61, 0x24, 0x5b,
    0x82, 0xca, 0xcd, 0x72, 0xce, 0xdb, 0x66, 0xb5, 0x8d, 0x54, 0xbd, 0xfb, 0x23, 0xfd, 0xe8, 0x8e,
    0xaf, 0xa7, 0xb3, 0x79, 0xbe, 0x94, 0xb5, 0xb7, 0xba, 0x17, 0xb6, 0x05, 0xae, 0xce, 0x43, 0xbe,
    0x3b, 0xce, 0x6e, 0xea, 0x07, 0xdb, 0xbf, 0x0a, 0x7e, 0xeb, 0xbc, 0xc9, 0x7b, 0x62, 0x3c, 0xf5,
    0xe1, 0xce, 0xe1, 0xd9, 0x8d, 0x9c, 0xfe, 0x1f, 0xc7, 0xf8, 0xfb, 0x59, 0xc0, 0x94, 0x0b, 0x2c,
    0xd9, 0x7d, 0xbc, 0x96, 0xeb, 0xb8, 0x79, 0x22, 0x8a, 0x2e, 0xa0, 0x12, 0x1d, 0x42, 0x07, 0xb6,
    0x5d, 0xdb, 0xe1, 0xf6, 0xb1, 0x5d, 0x7b, 0x1f, 0x54, 0x52, 0x1c, 0xa3, 0x11, 0x9b, 0xf9, 0xeb,
    0xbe, 0xb3, 0x95, 0xca, 0xa5, 0x87, 0x3f, 0x31, 0x18, 0x1a, 0xc9, 0x99, 0x01, 0xec, 0xaa, 0x90,
    0xfd, 0x8a, 0x36, 0x35, 0x5e, 0x12, 0x81, 0xbe, 0x84, 0x88, 0xa1, 0x0d, 0x19, 0x2a, 0x4a, 0x66,
    0xc1, 0x59, 0x3c, 0x41, 0x83, 0x3d, 0x3d, 0xb8, 0xd4, 0xab, 0x34, 0x90, 0x06, 0x3e, 0x1a, 0x61,
    0x74, 0xbe, 0x04, 0xf5, 0x7a, 0x69, 0x1b, 0x9d, 0x56, 0xfc, 0x83, 0xb7, 0x60, 0xc1, 0x5e, 0x9d,
    0x85, 0x34, 0xfd, 0x02, 0x1a, 0xba, 0x2c, 0x09, 0x72, 0xa7, 0x4a, 0x5e, 0x18, 0xbf, 0xc0, 0x58,
    0xa7, 0x49, 0x34, 0x46, 0x61, 0x59, 0x0e, 0xe2, 0x6e, 0x9e, 0xd2, 0xdb, 0xfd, 0x72, 0x2f, 0x3c,
    0x47, 0xcc, 0x5f, 0x99, 0x62, 0xee, 0x0d, 0xf3, 0x1f, 0x30, 0x25, 0x20, 0x92, 0x15, 0x4b, 0x04,
    0xfe, 0x15, 0x19, 0x1d, 0xdc, 0x7e, 0x5c, 0x10, 0x21, 0x52, 0x21, 0x91, 0x54, 0x60, 0x8b, 0x92,
    0x41, 0x02, 0x03, 0x01, 0x00, 0x01
  });

  // Java uses an unencrypted PKCS #8 PrivateKeyInfo, not a PKCS #1 RSAPrivateKey.
  private static final ByteBuffer DEFAULT_RSA_PRIVATE_KEY_DER = toBuffer(new int[] {
    0x30, 0x82, 0x04, 0xbf, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
    0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa9, 0x30, 0x82, 0x04, 0xa5, 0x02, 0x01,
    0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb8, 0x09, 0xa7, 0x59, 0x82, 0x84, 0xec, 0x4f, 0x06, 0xfa,
    0x1c, 0xb2, 0xe1, 0x38, 0x93, 0x53, 0xbb, 0x7d, 0xd4, 0xac, 0x88, 0x1a, 0xf8, 0x25, 0x11, 0xe4,
    0xfa, 0x1d, 0x61, 0x24, 0x5b, 0x82, 0xca, 0xcd, 0x72, 0xce, 0xdb, 0x66, 0xb5, 0x8d, 0x54, 0xbd,
    0xfb, 0x23, 0xfd, 0xe8, 0x8e, 0xaf, 0xa7, 0xb3, 0x79, 0xbe, 0x94, 0xb5, 0xb7, 0xba, 0x17, 0xb6,
    0x05, 0xae, 0xce, 0x43, 0xbe, 0x3b, 0xce, 0x6e, 0xea, 0x07, 0xdb, 0xbf, 0x0a, 0x7e, 0xeb, 0xbc,
    0xc9, 0x7b, 0x62, 0x3c, 0xf5, 0xe1, 0xce, 0xe1, 0xd9, 0x8d, 0x9c, 0xfe, 0x1f, 0xc7, 0xf8, 0xfb,
    0x59, 0xc0, 0x94, 0x0b, 0x2c, 0xd9, 0x7d, 0xbc, 0x96, 0xeb, 0xb8, 0x79, 0x22, 0x8a, 0x2e, 0xa0,
    0x12, 0x1d, 0x42, 0x07, 0xb6, 0x5d, 0xdb, 0xe1, 0xf6, 0xb1, 0x5d, 0x7b, 0x1f, 0x54, 0x52, 0x1c,
    0xa3, 0x11, 0x9b, 0xf9, 0xeb, 0xbe, 0xb3, 0x95, 0xca, 0xa5, 0x87, 0x3f, 0x31, 0x18, 0x1a, 0xc9,
    0x99, 0x01, 0xec, 0xaa, 0x90, 0xfd, 0x8a, 0x36, 0x35, 0x5e, 0x12, 0x81, 0xbe, 0x84, 0x88, 0xa1,
    0x0d, 0x19, 0x2a, 0x4a, 0x66, 0xc1, 0x59, 0x3c, 0x41, 0x83, 0x3d, 0x3d, 0xb8, 0xd4, 0xab, 0x34,
    0x90, 0x06, 0x3e, 0x1a, 0x61, 0x74, 0xbe, 0x04, 0xf5, 0x7a, 0x69, 0x1b, 0x9d, 0x56, 0xfc, 0x83,
    0xb7, 0x60, 0xc1, 0x5e, 0x9d, 0x85, 0x34, 0xfd, 0x02, 0x1a, 0xba, 0x2c, 0x09, 0x72, 0xa7, 0x4a,
    0x5e, 0x18, 0xbf, 0xc0, 0x58, 0xa7, 0x49, 0x34, 0x46, 0x61, 0x59, 0x0e, 0xe2, 0x6e, 0x9e, 0xd2,
    0xdb, 0xfd, 0x72, 0x2f, 0x3c, 0x47, 0xcc, 0x5f, 0x99, 0x62, 0xee, 0x0d, 0xf3, 0x1f, 0x30, 0x25,
    0x20, 0x92, 0x15, 0x4b, 0x04, 0xfe, 0x15, 0x19, 0x1d, 0xdc, 0x7e, 0x5c, 0x10, 0x21, 0x52, 0x21,
    0x91, 0x54, 0x60, 0x8b, 0x92, 0x41, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x01, 0x00,
    0x8a, 0x05, 0xfb, 0x73, 0x7f, 0x16, 0xaf, 0x9f, 0xa9, 0x4c, 0xe5, 0x3f, 0x26, 0xf8, 0x66, 0x4d,
    0xd2, 0xfc, 0xd1, 0x06, 0xc0, 0x60, 0xf1, 0x9f, 0xe3, 0xa6, 0xc6, 0x0a, 0x48, 0xb3, 0x9a, 0xca,
    0x21, 0xcd, 0x29, 0x80, 0x88, 0x3d, 0xa4, 0x85, 0xa5, 0x7b, 0x82, 0x21, 0x81, 0x28, 0xeb, 0xf2,
    0x43, 0x24, 0xb0, 0x76, 0xc5, 0x52, 0xef, 0xc2, 0xea, 0x4b, 0x82, 0x41, 0x92, 0xc2, 0x6d, 0xa6,
    0xae, 0xf0, 0xb2, 0x26, 0x48, 0xa1, 0x23, 0x7f, 0x02, 0xcf, 0xa8, 0x90, 0x17, 0xa2, 0x3e, 0x8a,
    0x26, 0xbd, 0x6d, 0x8a, 0xee, 0xa6, 0x0c, 0x31, 0xce, 0xc2, 0xbb, 0x92, 0x59, 0xb5, 0x73, 0xe2,
    0x7d, 0x91, 0x75, 0xe2, 0xbd, 0x8c, 0x63, 0xe2, 0x1c, 0x8b, 0xc2, 0x6a, 0x1c, 0xfe, 0x69, 0xc0,
    0x44, 0xcb, 0x58, 0x57, 0xb7, 0x13, 0x42, 0xf0, 0xdb, 0x50, 0x4c, 0xe0, 0x45, 0x09, 0x8f, 0xca,
    0x45, 0x8a, 0x06, 0xfe, 0x98, 0xd1, 0x22, 0xf5, 0x5a, 0x9a, 0xdf, 0x89, 0x17, 0xca, 0x20, 0xcc,
    0x12, 0xa9, 0x09, 0x3d, 0xd5, 0xf7, 0xe3, 0xeb, 0x08, 0x4a, 0xc4, 0x12, 0xc0, 0xb9, 0x47, 0x6c,
    0x79, 0x50, 0x66, 0xa3, 0xf8, 0xaf, 0x2c, 0xfa, 0xb4, 0x6b, 0xec, 0x03, 0xad, 0xcb, 0xda, 0x24,
    0x0c, 0x52, 0x07, 0x87, 0x88, 0xc0, 0x21, 0xf3, 0x02, 0xe8, 0x24, 0x44, 0x0f, 0xcd, 0xa0, 0xad,
    0x2f, 0x1b, 0x79, 0xab, 0x6b, 0x49, 0x4a, 0xe6, 0x3b, 0xd0, 0xad, 0xc3, 0x48, 0xb9, 0xf7, 0xf1,
    0x34, 0x09, 0xeb, 0x7a, 0xc0, 0xd5, 0x0d, 0x39, 0xd8, 0x45, 0xce, 0x36, 0x7a, 0xd8, 0xde, 0x3c,
    0xb0, 0x21, 0x96, 0x97, 0x8a, 0xff, 0x8b, 0x23, 0x60, 0x4f, 0xf0, 0x3d, 0xd7, 0x8f, 0xf3, 0x2c,
    0xcb, 0x1d, 0x48, 0x3f, 0x86, 0xc4, 0xa9, 0x00, 0xf2, 0x23, 0x2d, 0x72, 0x4d, 0x66, 0xa5, 0x01,
    0x02, 0x81, 0x81, 0x00, 0xdc, 0x4f, 0x99, 0x44, 0x0d, 0x7f, 0x59, 0x46, 0x1e, 0x8f, 0xe7, 0x2d,
    0x8d, 0xdd, 0x54, 0xc0, 0xf7, 0xfa, 0x46, 0x0d, 0x9d, 0x35, 0x03, 0xf1, 0x7c, 0x12, 0xf3, 0x5a,
    0x9d, 0x83, 0xcf, 0xdd, 0x37, 0x21, 0x7c, 0xb7, 0xee, 0xc3, 0x39, 0xd2, 0x75, 0x8f, 0xb2, 0x2d,
    0x6f, 0xec, 0xc6, 0x03, 0x55, 0xd7, 0x00, 0x67, 0xd3, 0x9b, 0xa2, 0x68, 0x50, 0x6f, 0x9e, 0x28,
    0xa4, 0x76, 0x39, 0x2b, 0xb2, 0x65, 0xcc, 0x72, 0x82, 0x93, 0xa0, 0xcf, 0x10, 0x05, 0x6a, 0x75,
    0xca, 0x85, 0x35, 0x99, 0xb0, 0xa6, 0xc6, 0xef, 0x4c, 0x4d, 0x99, 0x7d, 0x2c, 0x38, 0x01, 0x21,
    0xb5, 0x31, 0xac, 0x80, 0x54, 0xc4, 0x18, 0x4b, 0xfd, 0xef, 0xb3, 0x30, 0x22, 0x51, 0x5a, 0xea,
    0x7d, 0x9b, 0xb2, 0x9d, 0xcb, 0xba, 0x3f, 0xc0, 0x1a, 0x6b, 0xcd, 0xb0, 0xe6, 0x2f, 0x04, 0x33,
    0xd7, 0x3a, 0x49, 0x71, 0x02, 0x81, 0x81, 0x00, 0xd5, 0xd9, 0xc9, 0x70, 0x1a, 0x13, 0xb3, 0x39,
    0x24, 0x02, 0xee, 0xb0, 0xbb, 0x84, 0x17, 0x12, 0xc6, 0xbd, 0x65, 0x73, 0xe9, 0x34, 0x5d, 0x43,
    0xff, 0xdc, 0xf8, 0x55, 0xaf, 0x2a, 0xb9, 0xe1, 0xfa, 0x71, 0x65, 0x4e, 0x50, 0x0f, 0xa4, 0x3b,
    0xe5, 0x68, 0xf2, 0x49, 0x71, 0xaf, 0x15, 0x88, 0xd7, 0xaf, 0xc4, 0x9d, 0x94, 0x84, 0x6b, 0x5b,
    0x10, 0xd5, 0xc0, 0xaa, 0x0c, 0x13, 0x62, 0x99, 0xc0, 0x8b, 0xfc, 0x90, 0x0f, 0x87, 0x40, 0x4d,
    0x58, 0x88, 0xbd, 0xe2, 0xba, 0x3e, 0x7e, 0x2d, 0xd7, 0x69, 0xa9, 0x3c, 0x09, 0x64, 0x31, 0xb6,
    0xcc, 0x4d, 0x1f, 0x23, 0xb6, 0x9e, 0x65, 0xd6, 0x81, 0xdc, 0x85, 0xcc, 0x1e, 0xf1, 0x0b, 0x84,
    0x38, 0xab, 0x93, 0x5f, 0x9f, 0x92, 0x4e, 0x93, 0x46, 0x95, 0x6b, 0x3e, 0xb6, 0xc3, 0x1b, 0xd7,
    0x69, 0xa1, 0x0a, 0x97, 0x37, 0x78, 0xed, 0xd1, 0x02, 0x81, 0x80, 0x33, 0x18, 0xc3, 0x13, 0x65,
    0x8e, 0x03, 0xc6, 0x9f, 0x90, 0x00, 0xae, 0x30, 0x19, 0x05, 0x6f, 0x3c, 0x14, 0x6f, 0xea, 0xf8,
    0x6b, 0x33, 0x5e, 0xee, 0xc7, 0xf6, 0x69, 0x2d, 0xdf, 0x44, 0x76, 0xaa, 0x32, 0xba, 0x1a, 0x6e,
    0xe6, 0x18, 0xa3, 0x17, 0x61, 0x1c, 0x92, 0x2d, 0x43, 0x5d, 0x29, 0xa8, 0xdf, 0x14, 0xd8, 0xff,
    0xdb, 0x38, 0xef, 0xb8, 0xb8, 0x2a, 0x96, 0x82, 0x8e, 0x68, 0xf4, 0x19, 0x8c, 0x42, 0xbe, 0xcc,
    0x4a, 0x31, 0x21, 0xd5, 0x35, 0x6c, 0x5b, 0xa5, 0x7c, 0xff, 0xd1, 0x85, 0x87, 0x28, 0xdc, 0x97,
    0x75, 0xe8, 0x03, 0x80, 0x1d, 0xfd, 0x25, 0x34, 0x41, 0x31, 0x21, 0x12, 0x87, 0xe8, 0x9a, 0xb7,
    0x6a, 0xc0, 0xc4, 0x89, 0x31, 0x15, 0x45, 0x0d, 0x9c, 0xee, 0xf0, 0x6a, 0x2f, 0xe8, 0x59, 0x45,
    0xc7, 0x7b, 0x0d, 0x6c, 0x55, 0xbb, 0x43, 0xca, 0xc7, 0x5a, 0x01, 0x02, 0x81, 0x81, 0x00, 0xab,
    0xf4, 0xd5, 0xcf, 0x78, 0x88, 0x82, 0xc2, 0xdd, 0xbc, 0x25, 0xe6, 0xa2, 0xc1, 0xd2, 0x33, 0xdc,
    0xef, 0x0a, 0x97, 0x2b, 0xdc, 0x59, 0x6a, 0x86, 0x61, 0x4e, 0xa6, 0xc7, 0x95, 0x99, 0xa6, 0xa6,
    0x55, 0x6c, 0x5a, 0x8e, 0x72, 0x25, 0x63, 0xac, 0x52, 0xb9, 0x10, 0x69, 0x83, 0x99, 0xd3, 0x51,
    0x6c, 0x1a, 0xb3, 0x83, 0x6a, 0xff, 0x50, 0x58, 0xb7, 0x28, 0x97, 0x13, 0xe2, 0xba, 0x94, 0x5b,
    0x89, 0xb4, 0xea, 0xba, 0x31, 0xcd, 0x78, 0xe4, 0x4a, 0x00, 0x36, 0x42, 0x00, 0x62, 0x41, 0xc6,
    0x47, 0x46, 0x37, 0xea, 0x6d, 0x50, 0xb4, 0x66, 0x8f, 0x55, 0x0c, 0xc8, 0x99, 0x91, 0xd5, 0xec,
    0xd2, 0x40, 0x1c, 0x24, 0x7d, 0x3a, 0xff, 0x74, 0xfa, 0x32, 0x24, 0xe0, 0x11, 0x2b, 0x71, 0xad,
    0x7e, 0x14, 0xa0, 0x77, 0x21, 0x68, 0x4f, 0xcc, 0xb6, 0x1b, 0xe8, 0x00, 0x49, 0x13, 0x21, 0x02,
    0x81, 0x81, 0x00, 0xb6, 0x18, 0x73, 0x59, 0x2c, 0x4f, 0x92, 0xac, 0xa2, 0x2e, 0x5f, 0xb6, 0xbe,
    0x78, 0x5d, 0x47, 0x71, 0x04, 0x92, 0xf0, 0xd7, 0xe8, 0xc5, 0x7a, 0x84, 0x6b, 0xb8, 0xb4, 0x30,
    0x1f, 0xd8, 0x0d, 0x58, 0xd0, 0x64, 0x80, 0xa7, 0x21, 0x1a, 0x48, 0x00, 0x37, 0xd6, 0x19, 0x71,
    0xbb, 0x91, 0x20, 0x9d, 0xe2, 0xc3, 0xec, 0xdb, 0x36, 0x1c, 0xca, 0x48, 0x7d, 0x03, 0x32, 0x74,
    0x1e, 0x65, 0x73, 0x02, 0x90, 0x73, 0xd8, 0x3f, 0xb5, 0x52, 0x35, 0x79, 0x1c, 0xee, 0x93, 0xa3,
    0x32, 0x8b, 0xed, 0x89, 0x98, 0xf1, 0x0c, 0xd8, 0x12, 0xf2, 0x89, 0x7f, 0x32, 0x23, 0xec, 0x67,
    0x66, 0x52, 0x83, 0x89, 0x99, 0x5e, 0x42, 0x2b, 0x42, 0x4b, 0x84, 0x50, 0x1b, 0x3e, 0x47, 0x6d,
    0x74, 0xfb, 0xd1, 0xa6, 0x10, 0x20, 0x6c, 0x6e, 0xbe, 0x44, 0x3f, 0xb9, 0xfe, 0xbc, 0x8d, 0xda,
    0xcb, 0xea, 0x8f
  });

  public interface SimpleCallback {
    void exec();
  }

  /**
   * Send a command interest for the repo to start watching the given watchPrefix.
   * @param face The Face used to call makeCommandInterest and expressInterest.
   * @param repoCommandPrefix The repo command prefix.
   * @param watchPrefix The prefix that the repo will watch.
   * @param onRepoWatchStarted When the start watch command successfully returns,
   * this calls onRepoWatchStarted.exec().
   * @param onFailed If the command fails for any reason, this prints an error
   * and calls onFailed.exec().
   */
  static void
  startRepoWatch
    (Face face, Name repoCommandPrefix, Name watchPrefix,
     final SimpleCallback onRepoWatchStarted, final SimpleCallback onFailed)
  {
    // Construct a RepoCommandParameterMessage using the structure in
    // RepoCommandParameterProto.java which was produced by protoc.
    RepoCommandParameterMessage.Builder builder =
      RepoCommandParameterMessage.newBuilder();
    RepoCommandParameterMessage.RepoCommandParameter.Builder parameterBuilder =
      builder.getRepoCommandParameterBuilder();

    // Add the Name.
    RepoCommandParameterMessage.Name.Builder nameBuilder =
      parameterBuilder.getNameBuilder();
    for (int i = 0; i < watchPrefix.size(); ++i)
      nameBuilder.addComponent(ByteString.copyFrom(watchPrefix.get(i).getValue().buf()));

    try {
      // Create the command interest.
      Interest interest = new Interest(new Name(repoCommandPrefix)
        .append("watch").append("start").append(ProtobufTlv.encode(builder.build())));
      face.makeCommandInterest(interest);

      // Send the command interest and get the response or timeout.
      face.expressInterest
        (interest,
         new OnData() {
           public void onData(Interest interest, Data data) {
             processStartRepoWatchResponse
               (data.getContent(), onRepoWatchStarted, onFailed);
           }},
         new OnTimeout() {
           public void onTimeout(Interest interest) {
             System.out.println("Start repo watch command timeout");
             onFailed.exec();
           }});
    }
    catch (Exception e) {
      System.out.println("exception: " + e.getMessage());
      onFailed.exec();
    }
  }

  static void
  processStartRepoWatchResponse
    (Blob encodedResponse, final SimpleCallback onRepoWatchStarted,
     final SimpleCallback onFailed)
  {
    RepoCommandResponseMessage.Builder decodedResponse =
      RepoCommandResponseMessage.newBuilder();
    try {
      ProtobufTlv.decode(decodedResponse, encodedResponse);
    } catch (EncodingException ex) {
      System.out.println
        ("Cannot decode the repo command response " + ex.getMessage());
      onFailed.exec();
    }

    RepoCommandResponse response = decodedResponse.getRepoCommandResponse();
    if (response.getStatusCode() == 100)
      onRepoWatchStarted.exec();
    else {
      System.out.println("Got repo command error code " + response.getStatusCode());
      onFailed.exec();
    }
  }

  /**
   * Send a command interest for the repo to stop watching the given watchPrefix.
   * @param face The Face used to call makeCommandInterest and expressInterest.
   * @param repoCommandPrefix The repo command prefix.
   * @param watchPrefix The prefix that the repo will stop watching.
   * @param onRepoWatchStopped When the stop watch command successfully returns,
   * this calls onRepoWatchStarted.exec().
   * @param onFailed If the command fails for any reason, this prints an error
   * and calls onFailed.exec().
   */
  static void
  stopRepoWatch
    (Face face, Name repoCommandPrefix, Name watchPrefix,
     final SimpleCallback onRepoWatchStopped, final SimpleCallback onFailed)
  {
    // Construct a RepoCommandParameterMessage using the structure in
    // RepoCommandParameterProto.java which was produced by protoc.
    RepoCommandParameterMessage.Builder builder =
      RepoCommandParameterMessage.newBuilder();
    RepoCommandParameterMessage.RepoCommandParameter.Builder parameterBuilder =
      builder.getRepoCommandParameterBuilder();

    // Add the Name.
    RepoCommandParameterMessage.Name.Builder nameBuilder =
      parameterBuilder.getNameBuilder();
    for (int i = 0; i < watchPrefix.size(); ++i)
      nameBuilder.addComponent(ByteString.copyFrom(watchPrefix.get(i).getValue().buf()));

    try {
      // Create the command interest.
      Interest interest = new Interest(new Name(repoCommandPrefix)
        .append("watch").append("stop").append(ProtobufTlv.encode(builder.build())));
      face.makeCommandInterest(interest);

      // Send the command interest and get the response or timeout.
      face.expressInterest
        (interest,
         new OnData() {
           public void onData(Interest interest, Data data) {
             processStopRepoWatchResponse
               (data.getContent(), onRepoWatchStopped, onFailed);
           }},
         new OnTimeout() {
           public void onTimeout(Interest interest) {
             System.out.println("Start repo watch command timeout");
             onFailed.exec();
           }});
    }
    catch (Exception e) {
      System.out.println("exception: " + e.getMessage());
      onFailed.exec();
    }
  }

  static void
  processStopRepoWatchResponse
    (Blob encodedResponse, final SimpleCallback onRepoWatchStopped,
     final SimpleCallback onFailed)
  {
    RepoCommandResponseMessage.Builder decodedResponse =
      RepoCommandResponseMessage.newBuilder();
    try {
      ProtobufTlv.decode(decodedResponse, encodedResponse);
    } catch (EncodingException ex) {
      System.out.println
        ("Cannot decode the repo command response " + ex.getMessage());
      onFailed.exec();
    }

    RepoCommandResponse response = decodedResponse.getRepoCommandResponse();
    if (response.getStatusCode() == 101)
      onRepoWatchStopped.exec();
    else {
      System.out.println("Got repo command error code " + response.getStatusCode());
      onFailed.exec();
    }
  }

  /**
   * This is an example class to supply the data requested by the repo-ng
   * watched prefix process. For you application, you would supply data in a
   * different way. Repo-ng sends interests for the watchPrefix given to
   * startRepoWatch(). (The interest also has Exclude selectors but for
   * simplicity we ignore them and assume that the exclude values increase along
   * with the segment numbers that we send.) This sends data packets where the
   * name has the prefix plus increasing segment numbers up to a maximum.
   */
  static class SendSegments implements OnInterestCallback {
    SendSegments
      (KeyChain keyChain, Name certificateName, final SimpleCallback onFinished)
    {
      keyChain_ = keyChain;
      certificateName_ = certificateName;
      onFinished_ = onFinished;
      segment_ = -1;
    }

    /**
     * This is the onInterest callback to append the next segment number to the
     * prefix and send a new data packet. If the last packet is sent, then call
     * onFinished_.exec().
     */
    public void onInterest
      (Name prefix, Interest interest, Face face, long interestFilterId,
       InterestFilter filter)
    {
      long maxSegment = 2;
      if (segment_ >= maxSegment)
        // We have already called onFinished_.exec().
        return;

      System.out.println("Got interest " + interest.toUri());

      // Make and sign a Data packet with the interest name.
      segment_ += 1;
      Data data = new Data(new Name(prefix).appendSegment(segment_));
      String content = "Segment number " + segment_;
      data.setContent(new Blob(content));
      try {
        keyChain_.sign(data, certificateName_);
      } catch (SecurityException ex) {
        // We don't expect this to happen
        System.out.println("Error while signing the data " + ex.getMessage());
        return;
      }

      try {
        face.putData(data);
      } catch (IOException ex) {
        // We don't expect this to happen
        System.out.println("Error while sending the data " + ex.getMessage());
        return;
      }
      System.out.println("Sent data packet " + data.getName().toUri());

      if (segment_ >= maxSegment)
        // We sent the final data packet.
        onFinished_.exec();
    }

    private final KeyChain keyChain_;
    private final Name certificateName_;
    private final SimpleCallback onFinished_;
    private long segment_;
  }

  /**
   * Call startRepoWatch and register a prefix so that SendSegments will answer
   * interests from the repo to send data packets for the watched prefix.  When
   * all the data is sent (or an error), call stopRepoWatch. This assumes that
   * repo-ng is already running (e.g. `sudo ndn-repo-ng`).
   */
  public static void
  main(String[] args) throws EncodingException
  {
    try {
      final Name repoCommandPrefix = new Name("/example/repo/1");
      final Name repoDataPrefix = new Name("/example/data/1");

      long nowMilliseconds = System.currentTimeMillis();
      final Name watchPrefix = new Name(repoDataPrefix).append("testwatch")
        .appendVersion(nowMilliseconds);

      // The default Face connects to the local NFD.
      final Face face = new Face();

      // For now, when setting face.setCommandSigningInfo, use a key chain with
      //   a default private key instead of the system default key chain. This
      //   is OK for now because NFD is configured to skip verification, so it
      //   ignores the system default key chain.
      // On a platform which supports it, it would be better to use the default
      //   KeyChain constructor.
      MemoryIdentityStorage identityStorage = new MemoryIdentityStorage();
      MemoryPrivateKeyStorage privateKeyStorage = new MemoryPrivateKeyStorage();
      KeyChain keyChain = new KeyChain
        (new IdentityManager(identityStorage, privateKeyStorage),
         new SelfVerifyPolicyManager(identityStorage));
      keyChain.setFace(face);

      // Initialize the storage.
      Name keyName = new Name("/testname/DSK-123");
      Name certificateName = keyName.getSubName(0, keyName.size() - 1).append
        ("KEY").append(keyName.get(-1)).append("ID-CERT").append("0");
      identityStorage.addKey(keyName, KeyType.RSA, new Blob(DEFAULT_RSA_PUBLIC_KEY_DER, false));
      privateKeyStorage.setKeyPairForKeyName
        (keyName, KeyType.RSA, DEFAULT_RSA_PUBLIC_KEY_DER, DEFAULT_RSA_PRIVATE_KEY_DER);

      face.setCommandSigningInfo(keyChain, certificateName);

      final boolean[] enabled = new boolean[] { true };
      // Register the prefix and start the repo watch at the same time.

      SendSegments sendSegments = new SendSegments
        (keyChain, certificateName,
         new SimpleCallback() {
           public void exec() {
             stopRepoWatchAndQuit(face, repoCommandPrefix, watchPrefix, enabled);
           }});
      System.out.println("Register prefix " + watchPrefix.toUri());
      face.registerPrefix
        (watchPrefix, sendSegments,
         new OnRegisterFailed() {
           public void onRegisterFailed(Name prefix) {
             enabled[0] = false;
             System.out.println("Register failed for prefix " + prefix.toUri());
           }});

      startRepoWatch
        (face, repoCommandPrefix, watchPrefix,
         new SimpleCallback() {
           public void exec() {
             System.out.println("Watch started for " + watchPrefix.toUri());
           }},
         new SimpleCallback() {
           public void exec() {
             stopRepoWatchAndQuit(face, repoCommandPrefix, watchPrefix, enabled);
           }});

      // Loop calling processEvents until a callback sets enabled[0] = false.
      while (enabled[0]) {
        face.processEvents();

        // We need to sleep for a few milliseconds so we don't use 100% of
        //   the CPU.
        Thread.sleep(5);
      }
    }
    catch (Exception e) {
      System.out.println("exception: " + e.getMessage());
    }
  }

  static void
  stopRepoWatchAndQuit
    (Face face, Name repoCommandPrefix, final Name watchPrefix,
     final boolean[] enabled)
  {
    stopRepoWatch
      (face, repoCommandPrefix, watchPrefix,
       new SimpleCallback() {
         public void exec() {
           enabled[0] = false;
           System.out.println("Watch stopped for " + watchPrefix.toUri());
         }},
       new SimpleCallback() {
         public void exec() {
           enabled[0] = false;
           System.out.println("stopRepoWatch failed.");
         }});
  }
}
